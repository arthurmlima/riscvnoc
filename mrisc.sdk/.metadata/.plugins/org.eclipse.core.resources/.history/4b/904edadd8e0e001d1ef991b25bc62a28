#include <stdio.h>
#include "platform.h"
#include "sleep.h"
#include <stdlib.h>


#include "xparameters.h"
#include "xil_printf.h"
#include "xil_types.h"

enum {
	VIS_OK,
	VIS_ERROR
};

#define VIS_BASE_ADDRESS	XPAR_ZCU104_0_BASEADDR

typedef struct
{
	volatile u32 ADDR;
	volatile u32 DIN;
	volatile u32 DOUT;
	volatile u32 RST;
} Vis_AxiStruct;

#define VIS_AXI				((Vis_AxiStruct *)VIS_BASE_ADDRESS)

/* General Purpose Register - Control Bits */
#define VIS_AXI_EN			((u32 )0x00000001)
#define VIS_AXI_WEN			((u32 )0x0000001E) // HABILITA TUDO

/* General Purpose Register - Status Bits */
#define VIS_AXI_OK			((u32 )0x00100000)

/* Address Register */
#define VIS_AXI_ADR			((u32)0x000FFFE0)
#define VIS_AXI_ADR_SHIFT	0UL
#define VIS_AXI_ADR_MASK	((u32)0xFFFFFFFF)

/* Data In Register */
#define VIS_AXI_DTI			((u32)0x00000001)
#define VIS_AXI_DTI_SHIFT	0UL
#define VIS_AXI_DTI_MASK	((u32)0xFFFFFFFF)

/* Data Out Register */
#define VIS_AXI_DTO			((u32)0x00000001)
#define VIS_AXI_DTO_SHIFT	0UL
#define VIS_AXI_DTO_MASK	((u32)0xFFFFFFFF)

u32 program[54]=
{
		0xfe010113,
		0x00112e23,
		0x00812c23,
		0x02010413,
		0x0040006f,
		0x030005b7,
		0x00000533,
		0x00a5a023,
		0x01000637,
		0x00f00593,
		0x00b62423,
		0xfea42a23,
		0x0040006f,
		0xff442583,
		0x00092537,
		0x7bf50513,
		0x00b54e63,
		0x0040006f,
		0x0040006f,
		0xff442503,
		0x00150513,
		0xfea42a23,
		0xfddff06f,
		0x00000533,
		0xfea42823,
		0x0040006f,
		0xff042583,
		0x00092537,
		0x7bf50513,
		0x00b54e63,
		0x0040006f,
		0x0040006f,
		0xff042503,
		0x00150513,
		0xfea42823,
		0xfddff06f,
		0x00000533,
		0xfea42623,
		0x0040006f,
		0xfec42583,
		0x00092537,
		0x7bf50513,
		0x00b54e63,
		0x0040006f,
		0x0040006f,
		0xfec42503,
		0x00150513,
		0xfea42623,
		0xfddff06f,
		0x01000537,
		0x00852503,
		0x030005b7,
		0x00a5a023,
		0xf41ff06f,

};

u32 data[48]=
{
		0x2020000a,
		0x5f5f5f5f,
		0x205f2020,
		0x20202020,
		0x20202020,
		0x5f5f5f20,
		0x2020205f,
		0x20202020,
		0x5f5f2020,
		0x000a5f5f,
		0x20207c20,
		0x285c205f,
		0x5f20295f,
		0x5f205f5f,
		0x202f5f5f,
		0x7c5f5f5f,
		0x5f5f2020,
		0x2f20205f,
		0x5f5f5f20,
		0x20000a7c,
		0x5f7c207c,
		0x207c2029,
		0x5f202f7c,
		0x5f202f5f,
		0x5f5f5c20,
		0x205c205f,
		0x205f202f,
		0x7c207c5c,
		0x7c20000a,
		0x5f5f2020,
		0x7c207c2f,
		0x7c5f2820,
		0x295f2820,
		0x5f5f7c20,
		0x207c2029,
		0x20295f28,
		0x5f7c207c,
		0x000a5f5f,
		0x7c5f7c20,
		0x7c202020,
		0x5f5c7c5f,
		0x5f5c5f5f,
		0x5f2f5f5f,
		0x2f5f5f5f,
		0x5f5f5c20,
		0x5c202f5f,
		0x5f5f5f5f,
		0x00000a7c,
};

int main()
{

    init_platform();

    FILE *f;
    int i=0,rv;

volatile u32 xpointer=0x00400000/4;

for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
    VIS_AXI->DIN = (u32 ) program[i];
    VIS_AXI->ADDR |= VIS_AXI_WEN ;
    VIS_AXI->ADDR |= ((u32)i << 5);

    VIS_AXI->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI->ADDR & VIS_AXI_OK)){
    	__asm("nop");
   }
    VIS_AXI->ADDR =0;
    xpointer++;
}
volatile u32 j=0x2000/4;

/*for(int i=0; i< sizeof(data)/sizeof(data[0]);i++)
{
    VIS_AXI->DIN = (u32 ) data[i];
    VIS_AXI->ADDR |= VIS_AXI_WEN ;
    VIS_AXI->ADDR |= ((u32)j << 5);

    VIS_AXI->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI->ADDR & VIS_AXI_OK)){
    	__asm("nop");
   }
    VIS_AXI->ADDR =0;
    j++;
}*/




    VIS_AXI->RST=0;
    usleep(50);


    while(1){
    VIS_AXI->RST = 1;
    }







    cleanup_platform();
    return 0;
}
