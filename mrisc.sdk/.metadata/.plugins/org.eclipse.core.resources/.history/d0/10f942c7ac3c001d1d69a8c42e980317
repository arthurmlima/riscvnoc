#include <stdio.h>
#include <stdint.h>
#include "platform.h"
#include "sleep.h"
#include <stdlib.h>
#include "lena.h"
#include "xtime_l.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xil_types.h"

enum {
	VIS_OK,
	VIS_ERROR
};


XTime tStartARM;
int TimeARM;


#define VIS_BASE_ADDRESS_0	XPAR_ZCU104_0_BASEADDR
#define VIS_BASE_ADDRESS_1	XPAR_ZCU104_1_BASEADDR
#define VIS_BASE_ADDRESS_2	XPAR_ZCU104_2_BASEADDR
#define VIS_BASE_ADDRESS_3	XPAR_ZCU104_3_BASEADDR
#define VIS_BASE_ADDRESS_4	XPAR_ZCU104_4_BASEADDR
#define VIS_BASE_ADDRESS_5	XPAR_ZCU104_5_BASEADDR
#define VIS_BASE_ADDRESS_6	XPAR_ZCU104_6_BASEADDR
#define VIS_BASE_ADDRESS_7	XPAR_ZCU104_7_BASEADDR
#define VIS_BASE_ADDRESS_8	XPAR_ZCU104_8_BASEADDR
#define IMAGE_INIT_TRANS    XPAR_IMG_SET_V1_0_0_BASEADDR
#define CONTADOR_ADDRESS    XPAR_CONTADOR_CICLOS_0_BASEADDR


#define IMAGE_WIDTH     30
#define IMAGE_HEIGHT    30


#define X_TILES 3
#define Y_TILES 3


#define SUB_I 10


typedef struct
{
volatile uint32_t PIXEL;
volatile uint32_t X_DEST;
volatile uint32_t Y_DEST;
volatile uint32_t REQ;
volatile uint32_t ACK;
}ImageInitTransfer_struct;

typedef struct
{
volatile uint32_t X_INITi;
volatile uint32_t Y_INITi;
XTime TempoPrimeiro;
volatile uint32_t X_INITs;
volatile uint32_t Y_INITs;
XTime TempoSegundo;
XTime TempoFinal;
}ImageProfTransfer_struct;

ImageProfTransfer_struct dados[9];
ImageProfTransfer_struct dados_relativos[9];
typedef struct
{
	volatile u32 ADDR;
	volatile u32 DIN;
	volatile u32 DOUT;
	volatile u32 RST;
} Vis_AxiStruct;

#define VIS_AXI_0				((Vis_AxiStruct *)VIS_BASE_ADDRESS_0)
#define VIS_AXI_1				((Vis_AxiStruct *)VIS_BASE_ADDRESS_1)
#define VIS_AXI_2				((Vis_AxiStruct *)VIS_BASE_ADDRESS_2)
#define VIS_AXI_3				((Vis_AxiStruct *)VIS_BASE_ADDRESS_3)
#define VIS_AXI_4				((Vis_AxiStruct *)VIS_BASE_ADDRESS_4)
#define VIS_AXI_5				((Vis_AxiStruct *)VIS_BASE_ADDRESS_5)
#define VIS_AXI_6				((Vis_AxiStruct *)VIS_BASE_ADDRESS_6)
#define VIS_AXI_7				((Vis_AxiStruct *)VIS_BASE_ADDRESS_7)
#define VIS_AXI_8				((Vis_AxiStruct *)VIS_BASE_ADDRESS_8)

#define CONTADOR				((volatile u32  *)CONTADOR_ADDRESS)

#define Transfer                ((ImageInitTransfer_struct *)XPAR_IMG_SET_V1_0_0_BASEADDR)

/* General Purpose Register - Control Bits */
#define VIS_AXI_EN			((u32 )0x00000001)
#define VIS_AXI_WEN			((u32 )0x0000001E) // HABILITA TUDO

/* General Purpose Register - Status Bits */
#define VIS_AXI_OK			((u32 )0x00100000)

/* Address Register */
#define VIS_AXI_ADR			((u32)0x000FFFE0)
#define VIS_AXI_ADR_SHIFT	0UL
#define VIS_AXI_ADR_MASK	((u32)0xFFFFFFFF)

/* Data In Register */
#define VIS_AXI_DTI			((u32)0x00000001)
#define VIS_AXI_DTI_SHIFT	0UL
#define VIS_AXI_DTI_MASK	((u32)0xFFFFFFFF)

/* Data Out Register */
#define VIS_AXI_DTO			((u32)0x00000001)
#define VIS_AXI_DTO_SHIFT	0UL
#define VIS_AXI_DTO_MASK	((u32)0xFFFFFFFF)

void transfer_image(void);
void transfer_pixel(uint32_t pixel,uint32_t x_dest,uint32_t y_dest);
void checkCompletion(void);
void initarrayy(void);
void checkMessageSent(uint16_t j, uint16_t i);

u32 program[3000]=



{
 0xff010113,
0x00112623,
0x00812423,
0x01010413,
0x020007b7,
0x00078793,
0x00478793,
0x36400713,
0x00e7a023,
0x02310737,
0x00070713,
0x000067b7,
0x00078793,
0x40478793,
0x00072703,
0x00e7a023,
0x02310737,
0x00070713,
0x000067b7,
0x00078793,
0x40478793,
0x00072703,
0x00e7a023,
0x023107b7,
0x00078793,
0x02478713,
0x000067b7,
0x00078793,
0x40878793,
0x00072703,
0x00e7a023,
0x023107b7,
0x00078793,
0x02078713,
0x000067b7,
0x00078793,
0x40c78793,
0x00072703,
0x00e7a023,
0x023107b7,
0x00078793,
0x01c78713,
0x000067b7,
0x00078793,
0x41878793,
0x00072703,
0x00e7a023,
0x023107b7,
0x00078793,
0x01878713,
0x000067b7,
0x00078793,
0x41c78793,
0x00072703,
0x00e7a023,
0x023107b7,
0x00078793,
0x00c78713,
0x000067b7,
0x00078793,
0x41078793,
0x00072703,
0x00e7a023,
0x023107b7,
0x00078793,
0x00878713,
0x000067b7,
0x00078793,
0x41478793,
0x00072703,
0x00e7a023,
0x000037b7,
0x60078513,
0x00001317,
0xc5c300e7,
0x000037b7,
0x60078513,
0x00001317,
0xc4c300e7,
0x000037b7,
0x60278513,
0x00001317,
0xc3c300e7,
0x000037b7,
0x60478513,
0x00001317,
0xc2c300e7,
0x000037b7,
0x60778513,
0x00001317,
0xc1c300e7,
0x000037b7,
0x60b78513,
0x00001317,
0xc0c300e7,
0x000037b7,
0x60e78513,
0x00001317,
0xbfc300e7,
0x00000317,
0x00c300e7,
0x0000006f,
0xff010113,
0x00112623,
0x00812423,
0x01010413,
0x000067b7,
0x00078793,
0x41c78793,
0x0007a703,
0x00100793,
0x04f71263,
0x000067b7,
0x00078793,
0x41878793,
0x0007a703,
0x00100793,
0x02f71063,
0x00002317,
0xc94300e7,
0x00002317,
0xfec300e7,
0x00001317,
0x570300e7,
0x0180006f,
0x00002317,
0x01c300e7,
0x00c0006f,
0x00002317,
0x010300e7,
0x00000013,
0x00c12083,
0x00812403,
0x01010113,
0x00008067,
0xfd010113,
0x02112623,
0x02812423,
0x03010413,
0xfea42623,
0xfeb42423,
0xfec42223,
0xfed42023,
0xfce42e23,
0x022207b7,
0x00078793,
0x0007a023,
0x022307b7,
0x00078793,
0x0007a023,
0xfec42503,
0x00000317,
0x0d0300e7,
0xfe842503,
0x00000317,
0x120300e7,
0xfe442503,
0x00000317,
0x178300e7,
0xfe042503,
0x00000317,
0x1d0300e7,
0xfdc42503,
0x00000317,
0x228300e7,
0x022207b7,
0x00078793,
0x0007a703,
0x022207b7,
0x00078793,
0x00276713,
0x00e7a023,
0x00000013,
0x022207b7,
0x00078793,
0x0007a783,
0x0017f793,
0xfe0788e3,
0x022207b7,
0x00078793,
0x0007a703,
0x022207b7,
0x00078793,
0xffd77713,
0x00e7a023,
0x00000013,
0x022207b7,
0x00078793,
0x0007a783,
0x0017f713,
0x00100793,
0xfef706e3,
0x022207b7,
0x00078793,
0x0007a023,
0x022307b7,
0x00078793,
0x0007a023,
0x00000013,
0x02c12083,
0x02812403,
0x03010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x022307b7,
0x00078793,
0x0007a703,
0xffff07b7,
0x00078793,
0x00f77733,
0xfec42783,
0x00f766b3,
0x022307b7,
0x00078793,
0x0007a703,
0x022307b7,
0x00078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x022207b7,
0x00078793,
0x0007a703,
0x808007b7,
0x00078793,
0xfff78793,
0x00f77733,
0xfec42783,
0x01779793,
0x00f766b3,
0x022207b7,
0x00078793,
0x0007a703,
0x022207b7,
0x00078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x022207b7,
0x00078793,
0x0007a703,
0xff8087b7,
0x00078793,
0xfff78793,
0x00f77733,
0xfec42783,
0x00f79793,
0x00f766b3,
0x022207b7,
0x00078793,
0x0007a703,
0x022207b7,
0x00078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x022207b7,
0x00078793,
0x0007a703,
0xffff87b7,
0x00078793,
0x3ff78793,
0x00f77733,
0xfec42783,
0x00a79793,
0x00f766b3,
0x022207b7,
0x00078793,
0x0007a703,
0x022207b7,
0x00078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x022207b7,
0x00078793,
0x0007a783,
0xc037f713,
0xfec42783,
0x00279793,
0x00f766b3,
0x022207b7,
0x00078793,
0x0007a703,
0x022207b7,
0x00078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfd010113,
0x02112623,
0x02812423,
0x03010413,
0xfea42623,
0xfeb42423,
0xfec42223,
0xfed42023,
0xfce42e23,
0xfcf42c23,
0xfd042a23,
0xfd142823,
0x022007b7,
0x00078793,
0x0007a023,
0x022007b7,
0x00078793,
0x0007a023,
0x022107b7,
0x00078793,
0x0007a023,
0x000067b7,
0x00078793,
0x20478793,
0x0007a023,
0x000067b7,
0x00078793,
0x20078793,
0x0007a023,
0xfec42503,
0x00000317,
0x118300e7,
0xfe842503,
0x00000317,
0x17c300e7,
0xfe442503,
0x00000317,
0x1dc300e7,
0xfe042503,
0x00000317,
0x28c300e7,
0xfdc42503,
0x00000317,
0x224300e7,
0xfd842503,
0x00000317,
0x2e0300e7,
0xfd442503,
0x00000317,
0x340300e7,
0xfd042503,
0x00000317,
0x398300e7,
0x000067b7,
0x00078793,
0x20478713,
0x022107b7,
0x00078793,
0x00072703,
0x00e7a023,
0x000067b7,
0x00078793,
0x20078713,
0x022007b7,
0x00078793,
0x00072703,
0x00e7a023,
0x022007b7,
0x00078793,
0x0007a703,
0x022007b7,
0x00078793,
0x00276713,
0x00e7a023,
0x00000013,
0x022007b7,
0x00078793,
0x0007a783,
0x0017f793,
0xfe0788e3,
0x022007b7,
0x00078793,
0x0007a703,
0x022007b7,
0x00078793,
0xffd77713,
0x00e7a023,
0x00000013,
0x022007b7,
0x00078793,
0x0007a783,
0x0017f713,
0x00100793,
0xfef706e3,
0x00000013,
0x00000013,
0x02c12083,
0x02812403,
0x03010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20478793,
0x0007a703,
0x000107b7,
0x00078793,
0xfff78793,
0x00f77733,
0xfec42783,
0x01079793,
0x00f766b3,
0x000067b7,
0x00078793,
0x20478793,
0x0007a703,
0x000067b7,
0x00078793,
0x20478793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20478793,
0x0007a703,
0xffff07b7,
0x00078793,
0x00f77733,
0xfec42783,
0x00879793,
0x00f766b3,
0x000067b7,
0x00078793,
0x20478793,
0x0007a703,
0x000067b7,
0x00078793,
0x20478793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20478793,
0x0007a783,
0xf007f713,
0xfec42783,
0x00f766b3,
0x000067b7,
0x00078793,
0x20478793,
0x0007a703,
0x000067b7,
0x00078793,
0x20478793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20078793,
0x0007a783,
0xfec42783,
0x01b79693,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0x000067b7,
0x00078793,
0x20078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0xf80007b7,
0x00078793,
0x00f77733,
0xfec42783,
0x01379793,
0x00f766b3,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0x000067b7,
0x00078793,
0x20078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0xfff807b7,
0x00078793,
0x00f77733,
0xfec42783,
0x00b79793,
0x00f766b3,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0x000067b7,
0x00078793,
0x20078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20078793,
0x0007a783,
0x8007f713,
0xfec42783,
0x00379793,
0x00f766b3,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0x000067b7,
0x00078793,
0x20078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0x000067b7,
0x00078793,
0x20078793,
0x0007a783,
0xff87f713,
0xfec42783,
0x00279793,
0x00f766b3,
0x000067b7,
0x00078793,
0x20078793,
0x0007a703,
0x000067b7,
0x00078793,
0x20078793,
0x00e6e733,
0x00e7a023,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xff010113,
0x00112623,
0x00812423,
0x01010413,
0x00000013,
0x021007b7,
0x00078793,
0x0007a783,
0x0027f793,
0xfe0788e3,
0x00000317,
0x0a8300e7,
0x00000317,
0x0ec300e7,
0x00000317,
0x124300e7,
0x00000317,
0x158300e7,
0x00000317,
0x190300e7,
0x00000317,
0x1c8300e7,
0x00000317,
0x200300e7,
0x00000317,
0x238300e7,
0x021007b7,
0x00078793,
0x0007a703,
0x021007b7,
0x00078793,
0x00176713,
0x00e7a023,
0x00000013,
0x021007b7,
0x00078793,
0x0007a783,
0x0027f713,
0x00100793,
0xfef706e3,
0x021007b7,
0x00078793,
0x0007a703,
0x021007b7,
0x00078793,
0xffe77713,
0x00e7a023,
0x00000013,
0x00c12083,
0x00812403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021107b7,
0x00078793,
0x0007a783,
0x0107d693,
0x000067b7,
0x00078793,
0x10078793,
0x00010737,
0x00070713,
0xfff70713,
0x00e6f733,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021107b7,
0x00078793,
0x0007a783,
0x0087d713,
0x000067b7,
0x00078793,
0x10478793,
0x0ff77713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021107b7,
0x00078793,
0x0007a703,
0x000067b7,
0x00078793,
0x10878793,
0x0ff77713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a783,
0x01b7d713,
0x000067b7,
0x00078793,
0x10c78793,
0x01f77713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a783,
0x0137d713,
0x000067b7,
0x00078793,
0x11078793,
0x0ff77713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a783,
0x00b7d713,
0x000067b7,
0x00078793,
0x11478793,
0x0ff77713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a783,
0x0037d713,
0x000067b7,
0x00078793,
0x11878793,
0x0ff77713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a783,
0x0027d713,
0x000067b7,
0x00078793,
0x11c78793,
0x00177713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a783,
0x0017d713,
0x000067b7,
0x00078793,
0x12078793,
0x00177713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x021007b7,
0x00078793,
0x0007a703,
0x000067b7,
0x00078793,
0x12478793,
0x00177713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0x00a007b3,
0xfef407a3,
0xfef44703,
0x00a00793,
0x00f71863,
0x00d00513,
0x00000317,
0xfd8300e7,
0x020007b7,
0x00078793,
0x00878793,
0xfef44703,
0x00e7a023,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfea42623,
0x0200006f,
0xfec42783,
0x00178713,
0xfee42623,
0x0007c783,
0x00f00533,
0x00000317,
0xf7c300e7,
0xfec42783,
0x0007c783,
0xfc079ee3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfea42623,
0xfec42703,
0x38300793,
0x02e7f063,
0x03900513,
0x00000317,
0xf2c300e7,
0xfec42783,
0xc7c78793,
0xfef42623,
0x1500006f,
0xfec42703,
0x31f00793,
0x02e7f063,
0x03800513,
0x00000317,
0xf04300e7,
0xfec42783,
0xce078793,
0xfef42623,
0x1280006f,
0xfec42703,
0x2bb00793,
0x02e7f063,
0x03700513,
0x00000317,
0xedc300e7,
0xfec42783,
0xd4478793,
0xfef42623,
0x1000006f,
0xfec42703,
0x25700793,
0x02e7f063,
0x03600513,
0x00000317,
0xeb4300e7,
0xfec42783,
0xda878793,
0xfef42623,
0x0d80006f,
0xfec42703,
0x1f300793,
0x02e7f063,
0x03500513,
0x00000317,
0xe8c300e7,
0xfec42783,
0xe0c78793,
0xfef42623,
0x0b00006f,
0xfec42703,
0x18f00793,
0x02e7f063,
0x03400513,
0x00000317,
0xe64300e7,
0xfec42783,
0xe7078793,
0xfef42623,
0x0880006f,
0xfec42703,
0x12b00793,
0x02e7f063,
0x03300513,
0x00000317,
0xe3c300e7,
0xfec42783,
0xed478793,
0xfef42623,
0x0600006f,
0xfec42703,
0x0c700793,
0x02e7f063,
0x03200513,
0x00000317,
0xe14300e7,
0xfec42783,
0xf3878793,
0xfef42623,
0x0380006f,
0xfec42703,
0x06300793,
0x02e7f063,
0x03100513,
0x00000317,
0xdec300e7,
0xfec42783,
0xf9c78793,
0xfef42623,
0x0100006f,
0x03000513,
0x00000317,
0xdd0300e7,
0xfec42703,
0x05900793,
0x02e7f063,
0x03900513,
0x00000317,
0xdb8300e7,
0xfec42783,
0xfa678793,
0xfef42623,
0x1500006f,
0xfec42703,
0x04f00793,
0x02e7f063,
0x03800513,
0x00000317,
0xd90300e7,
0xfec42783,
0xfb078793,
0xfef42623,
0x1280006f,
0xfec42703,
0x04500793,
0x02e7f063,
0x03700513,
0x00000317,
0xd68300e7,
0xfec42783,
0xfba78793,
0xfef42623,
0x1000006f,
0xfec42703,
0x03b00793,
0x02e7f063,
0x03600513,
0x00000317,
0xd40300e7,
0xfec42783,
0xfc478793,
0xfef42623,
0x0d80006f,
0xfec42703,
0x03100793,
0x02e7f063,
0x03500513,
0x00000317,
0xd18300e7,
0xfec42783,
0xfce78793,
0xfef42623,
0x0b00006f,
0xfec42703,
0x02700793,
0x02e7f063,
0x03400513,
0x00000317,
0xcf0300e7,
0xfec42783,
0xfd878793,
0xfef42623,
0x0880006f,
0xfec42703,
0x01d00793,
0x02e7f063,
0x03300513,
0x00000317,
0xcc8300e7,
0xfec42783,
0xfe278793,
0xfef42623,
0x0600006f,
0xfec42703,
0x01300793,
0x02e7f063,
0x03200513,
0x00000317,
0xca0300e7,
0xfec42783,
0xfec78793,
0xfef42623,
0x0380006f,
0xfec42703,
0x00900793,
0x02e7f063,
0x03100513,
0x00000317,
0xc78300e7,
0xfec42783,
0xff678793,
0xfef42623,
0x0100006f,
0x03000513,
0x00000317,
0xc5c300e7,
0xfec42703,
0x00800793,
0x02e7f063,
0x03900513,
0x00000317,
0xc44300e7,
0xfec42783,
0xff778793,
0xfef42623,
0x14c0006f,
0xfec42703,
0x00700793,
0x02e7f063,
0x03800513,
0x00000317,
0xc1c300e7,
0xfec42783,
0xff878793,
0xfef42623,
0x1240006f,
0xfec42703,
0x00600793,
0x02e7f063,
0x03700513,
0x00000317,
0xbf4300e7,
0xfec42783,
0xff978793,
0xfef42623,
0x0fc0006f,
0xfec42703,
0x00500793,
0x02e7f063,
0x03600513,
0x00000317,
0xbcc300e7,
0xfec42783,
0xffa78793,
0xfef42623,
0x0d40006f,
0xfec42703,
0x00400793,
0x02e7f063,
0x03500513,
0x00000317,
0xba4300e7,
0xfec42783,
0xffb78793,
0xfef42623,
0x0ac0006f,
0xfec42703,
0x00300793,
0x02e7f063,
0x03400513,
0x00000317,
0xb7c300e7,
0xfec42783,
0xffc78793,
0xfef42623,
0x0840006f,
0xfec42703,
0x00200793,
0x02e7f063,
0x03300513,
0x00000317,
0xb54300e7,
0xfec42783,
0xffd78793,
0xfef42623,
0x05c0006f,
0xfec42703,
0x00100793,
0x02e7f063,
0x03200513,
0x00000317,
0xb2c300e7,
0xfec42783,
0xffe78793,
0xfef42623,
0x0340006f,
0xfec42783,
0x02078063,
0x03100513,
0x00000317,
0xb08300e7,
0xfec42783,
0xfff78793,
0xfef42623,
0x0100006f,
0x03000513,
0x00000317,
0xaec300e7,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfe042423,
0x1080006f,
0xfe042223,
0x0d00006f,
0xfe842703,
0x00e007b3,
0x00279793,
0x00e787b3,
0x00279793,
0x00f00733,
0xfe442783,
0x00f707b3,
0xfef42623,
0xfec42503,
0x023107b7,
0x00078793,
0x02078793,
0x0007a703,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00100893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0x00a00613,
0x00000593,
0xfffff317,
0x230300e7,
0xfffff317,
0x6f0300e7,
0x000037b7,
0x60078513,
0x00000317,
0xa8c300e7,
0x000067b7,
0x00078793,
0x10078793,
0x0007a783,
0x00f00533,
0x00000317,
0xac8300e7,
0x000037b7,
0x60078513,
0x00000317,
0xa60300e7,
0x000037b7,
0x60778513,
0x00000317,
0xa50300e7,
0xfe442783,
0x00178793,
0xfef42223,
0x023107b7,
0x00078793,
0x0007a703,
0xfe442783,
0xf2e7e2e3,
0x000037b7,
0x60e78513,
0x00000317,
0xa20300e7,
0xfe842783,
0x00178793,
0xfef42423,
0x023107b7,
0x00078793,
0x00478793,
0x0007a703,
0xfe842783,
0xeee7e4e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0xfef42623,
0x0a40006f,
0x023107b7,
0x00078793,
0x02078793,
0x0007a783,
0xfef42423,
0x06c0006f,
0xfffff317,
0x5f0300e7,
0x000067b7,
0x00078793,
0x10078793,
0x0007a503,
0x023107b7,
0x00078793,
0x02078793,
0x0007a703,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00100893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0x00000613,
0x00000593,
0xfffff317,
0x0d4300e7,
0xfe842783,
0x00178793,
0xfef42423,
0x023107b7,
0x00078793,
0x0007a703,
0xfe842783,
0xf8e7e4e3,
0xfec42783,
0x00178793,
0xfef42623,
0x023107b7,
0x00078793,
0x00478793,
0x0007a703,
0xfec42783,
0xf4e7e6e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0x000067b7,
0x00078793,
0x40878793,
0x0007a783,
0xfef42423,
0x0dc0006f,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a783,
0xfef42223,
0x08c0006f,
0xfe842703,
0x00e007b3,
0x00479793,
0x40e787b3,
0x00179793,
0x00f00733,
0xfe442783,
0x00f707b3,
0xfef42623,
0xfec42783,
0x00f00533,
0x00000317,
0x8d0300e7,
0xfe442783,
0x00f00533,
0x00000317,
0x8c0300e7,
0xfe842783,
0x00f00533,
0x00000317,
0x8b0300e7,
0xfec42783,
0x00f00533,
0xfe442783,
0x00f005b3,
0xfe842783,
0x00000713,
0x00000693,
0x00f00633,
0xfffff317,
0xccc300e7,
0xfe442783,
0x00178793,
0xfef42223,
0x000067b7,
0x00078793,
0x41478793,
0x0007a703,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a783,
0x00f707b3,
0xfe442703,
0xf4f768e3,
0xfe842783,
0x00178793,
0xfef42423,
0x000067b7,
0x00078793,
0x41078793,
0x0007a703,
0x000067b7,
0x00078793,
0x40878793,
0x0007a783,
0x00f707b3,
0xfe842703,
0xf0f760e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0x000067b7,
0x00078793,
0x40878793,
0x0007a783,
0xfef42223,
0x1100006f,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a783,
0xfef42623,
0x0b00006f,
0xfec42583,
0xfe442783,
0x00f00633,
0x023107b7,
0x00078793,
0x02078793,
0x0007a703,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00000893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0x00000513,
0xfffff317,
0xea8300e7,
0xfffff317,
0x368300e7,
0x000037b7,
0x60078513,
0xfffff317,
0x704300e7,
0x000067b7,
0x00078793,
0x10078793,
0x0007a783,
0x00f00533,
0xfffff317,
0x740300e7,
0x000037b7,
0x60078513,
0xfffff317,
0x6d8300e7,
0x000037b7,
0x60478513,
0xfffff317,
0x6c8300e7,
0xfec42783,
0x00178793,
0xfef42623,
0x023107b7,
0x00078793,
0x00878793,
0x0007a703,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a783,
0x00f70733,
0xfec42783,
0xf2e7e6e3,
0x000037b7,
0x60e78513,
0xfffff317,
0x680300e7,
0xfe442783,
0x00178793,
0xfef42223,
0x000067b7,
0x00078793,
0x41078793,
0x0007a703,
0x000067b7,
0x00078793,
0x40878793,
0x0007a783,
0x00f707b3,
0xfe442703,
0xecf766e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfe042423,
0x0dc0006f,
0xfe042223,
0x0ac0006f,
0xfe442583,
0xfe842603,
0x023107b7,
0x00078793,
0x02078793,
0x0007a703,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00000893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0x00000513,
0xfffff317,
0xd54300e7,
0xfffff317,
0x214300e7,
0x000037b7,
0x60078513,
0xfffff317,
0x5b0300e7,
0x000067b7,
0x00078793,
0x10078793,
0x0007a783,
0x00f00533,
0xfffff317,
0x5ec300e7,
0x000037b7,
0x60078513,
0xfffff317,
0x584300e7,
0x000037b7,
0x60478513,
0xfffff317,
0x574300e7,
0xfe442783,
0x00178793,
0xfef42223,
0xfe442703,
0x0ef00793,
0xf4e7f8e3,
0x000037b7,
0x60e78513,
0xfffff317,
0x54c300e7,
0xfe842783,
0x00178793,
0xfef42423,
0xfe842703,
0x0ef00793,
0xf2e7f0e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfd010113,
0x02112623,
0x02812423,
0x03010413,
0x00a007b3,
0x00b00733,
0xfcf40fa3,
0x00e007b3,
0xfcf40f23,
0xfde44703,
0x023107b7,
0x00078793,
0x00c78793,
0x0007a783,
0x02f707b3,
0xfef42623,
0x1100006f,
0xfdf44703,
0x023107b7,
0x00078793,
0x00878793,
0x0007a783,
0x02f707b3,
0xfef42423,
0x0ac0006f,
0xfe842583,
0xfec42603,
0x023107b7,
0x00078793,
0x02078793,
0x0007a703,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00000893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0x00000513,
0xfffff317,
0xbfc300e7,
0xfffff317,
0x0bc300e7,
0x000037b7,
0x60078513,
0xfffff317,
0x458300e7,
0x000067b7,
0x00078793,
0x10078793,
0x0007a783,
0x00f00533,
0xfffff317,
0x494300e7,
0x000037b7,
0x60078513,
0xfffff317,
0x42c300e7,
0x000037b7,
0x60478513,
0xfffff317,
0x41c300e7,
0xfe842783,
0x00178793,
0xfef42423,
0xfdf44783,
0x00178793,
0x00f00733,
0x023107b7,
0x00078793,
0x00878793,
0x0007a783,
0x02f70733,
0xfe842783,
0xf2e7eae3,
0x000037b7,
0x60e78513,
0xfffff317,
0x3d8300e7,
0xfec42783,
0x00178793,
0xfef42623,
0xfde44783,
0x00178793,
0x00f00733,
0x023107b7,
0x00078793,
0x00c78793,
0x0007a783,
0x02f70733,
0xfec42783,
0xece7e8e3,
0x00000013,
0x00000013,
0x02c12083,
0x02812403,
0x03010113,
0x00008067,
0xfd010113,
0x02112623,
0x02812423,
0x03010413,
0x00a007b3,
0x00b00733,
0xfcf40fa3,
0x00e007b3,
0xfcf40f23,
0xfde44703,
0x023107b7,
0x00078793,
0x00c78793,
0x0007a783,
0x02f707b3,
0xfef42623,
0x0b40006f,
0xfdf44703,
0x023107b7,
0x00078793,
0x00878793,
0x0007a783,
0x02f707b3,
0xfef42423,
0x0600006f,
0xfe842583,
0xfec42603,
0x023107b7,
0x00078793,
0x02078793,
0x0007a703,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00000893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0x00000513,
0xfffff317,
0xa6c300e7,
0xfffff317,
0xf2c300e7,
0xfe842783,
0x00178793,
0xfef42423,
0xfdf44783,
0x00178793,
0x00f00733,
0x023107b7,
0x00078793,
0x00878793,
0x0007a783,
0x02f70733,
0xfe842783,
0xf8e7e0e3,
0xfec42783,
0x00178793,
0xfef42623,
0xfde44783,
0x00178793,
0x00f00733,
0x023107b7,
0x00078793,
0x00c78793,
0x0007a783,
0x02f70733,
0xfec42783,
0xf2e7e6e3,
0x00000013,
0x00000013,
0x02c12083,
0x02812403,
0x03010113,
0x00008067,
0xff010113,
0x00112623,
0x00812423,
0x01010413,
0x00000317,
0x95c300e7,
0x00000317,
0xa98300e7,
0x00000013,
0x00c12083,
0x00812403,
0x01010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfe042623,
0x05c0006f,
0xfe042423,
0x0300006f,
0xfec42783,
0x0ff7f793,
0xfe842703,
0x0ff77713,
0x00e005b3,
0x00f00533,
0x00000317,
0xcd0300e7,
0xfe842783,
0x00178793,
0xfef42423,
0x023107b7,
0x00078793,
0x01478793,
0x0007a703,
0xfe842783,
0xfce7e0e3,
0xfec42783,
0x00178793,
0xfef42623,
0x023107b7,
0x00078793,
0x01078793,
0x0007a703,
0xfec42783,
0xf8e7eae3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0x00000793,
0x00000813,
0xfef42423,
0xff042623,
0x03c0006f,
0xfe842703,
0xfec42783,
0x00100513,
0x00000593,
0x00a70633,
0x00c00833,
0x00e83833,
0x00b786b3,
0x00d807b3,
0x00f006b3,
0x00c00733,
0x00d007b3,
0xfee42423,
0xfef42623,
0xfe842703,
0xfec42783,
0x00f006b3,
0x00069e63,
0x00f006b3,
0xfa069ae3,
0x000057b7,
0x00078793,
0xe1f78793,
0xfae7f2e3,
0x00000013,
0x01c12403,
0x02010113,
0x00008067,
0xff010113,
0x00112623,
0x00812423,
0x01010413,
0x023107b7,
0x00078793,
0x0007a783,
0x00f00533,
0xfffff317,
0x124300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0x0bc300e7,
0x023107b7,
0x00078793,
0x00478793,
0x0007a783,
0x00f00533,
0xfffff317,
0x0f8300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0x090300e7,
0x023107b7,
0x00078793,
0x00878793,
0x0007a783,
0x00f00533,
0xfffff317,
0x0cc300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0x064300e7,
0x023107b7,
0x00078793,
0x00c78793,
0x0007a783,
0x00f00533,
0xfffff317,
0x0a0300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0x038300e7,
0x023107b7,
0x00078793,
0x01078793,
0x0007a783,
0x00f00533,
0xfffff317,
0x074300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0x00c300e7,
0x023107b7,
0x00078793,
0x01478793,
0x0007a783,
0x00f00533,
0xfffff317,
0x048300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0xfe0300e7,
0x023107b7,
0x00078793,
0x01878793,
0x0007a783,
0x00f00533,
0xfffff317,
0x01c300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0xfb4300e7,
0x023107b7,
0x00078793,
0x01c78793,
0x0007a783,
0x00f00533,
0xfffff317,
0xff0300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0xf88300e7,
0x023107b7,
0x00078793,
0x02078793,
0x0007a783,
0x00f00533,
0xfffff317,
0xfc4300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0xf5c300e7,
0x023107b7,
0x00078793,
0x02478793,
0x0007a783,
0x00f00533,
0xfffff317,
0xf98300e7,
0x000037b7,
0x60e78513,
0xfffff317,
0xf30300e7,
0x00000013,
0x00c12083,
0x00812403,
0x01010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfe042623,
0x1a80006f,
0x00000013,
0x023007b7,
0x00078793,
0x00c78793,
0x0007a783,
0xfe0788e3,
0x023007b7,
0x00078793,
0x00478793,
0x0007a703,
0x023007b7,
0x00078793,
0x00878793,
0x0007a783,
0x00f005b3,
0x00e00533,
0x00000317,
0x220300e7,
0x00a007b3,
0x08078a63,
0x023007b7,
0x00078793,
0x0007a503,
0x023007b7,
0x00078793,
0x00478793,
0x0007a583,
0x023007b7,
0x00078793,
0x00878793,
0x0007a783,
0x00000713,
0x00000693,
0x00f00633,
0xffffe317,
0x310300e7,
0x023007b7,
0x00078793,
0x00478793,
0x0007a703,
0x023007b7,
0x00078793,
0x00878793,
0x0007a783,
0x00f005b3,
0x00e00533,
0x00000317,
0x118300e7,
0x00a007b3,
0x08078263,
0x023007b7,
0x00078793,
0x01878793,
0x00100713,
0x00e7a023,
0x06c0006f,
0x023007b7,
0x00078793,
0x0007a503,
0x023007b7,
0x00078793,
0x00478793,
0x0007a583,
0x023007b7,
0x00078793,
0x00878793,
0x0007a603,
0x023007b7,
0x00078793,
0x00478793,
0x0007a703,
0x023007b7,
0x00078793,
0x00878793,
0x0007a783,
0x00100893,
0x00f00833,
0x00e007b3,
0x00000713,
0x00000693,
0xffffe317,
0x548300e7,
0x000037b7,
0x60b78513,
0xfffff317,
0xdac300e7,
0x023007b7,
0x00078793,
0x01078793,
0x00100713,
0x00e7a023,
0x00000013,
0x023007b7,
0x00078793,
0x00c78793,
0x0007a703,
0x00100793,
0xfef706e3,
0x023007b7,
0x00078793,
0x01078793,
0x0007a023,
0xfec42783,
0x00178793,
0xfef42623,
0xfec42703,
0x0000e7b7,
0x00078793,
0x10078793,
0xe4f716e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0xfeb42423,
0x000067b7,
0x00078793,
0x40878793,
0x0007a703,
0x000067b7,
0x00078793,
0x41078793,
0x0007a783,
0x00f707b3,
0xfff78793,
0xfe842703,
0x02f71e63,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a703,
0x000067b7,
0x00078793,
0x41478793,
0x0007a783,
0x00f707b3,
0xfff78793,
0xfec42703,
0x00f71663,
0x00100793,
0x0080006f,
0x00000793,
0x00f00533,
0x01c12403,
0x02010113,
0x00008067,
0xfe010113,
0x00812e23,
0x02010413,
0xfea42623,
0xfeb42423,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a783,
0xfec42703,
0x00f737b3,
0x0017c793,
0x0ff7f713,
0x000067b7,
0x00078793,
0x40c78793,
0x0007a683,
0x000067b7,
0x00078793,
0x41478793,
0x0007a783,
0x00f687b3,
0xfec42683,
0x00f6b7b3,
0x0ff7f793,
0x00f777b3,
0x0ff7f793,
0x06078463,
0x000067b7,
0x00078793,
0x40878793,
0x0007a783,
0xfe842703,
0x00f737b3,
0x0017c793,
0x0ff7f713,
0x000067b7,
0x00078793,
0x40878793,
0x0007a683,
0x000067b7,
0x00078793,
0x41078793,
0x0007a783,
0x00f687b3,
0xfe842683,
0x00f6b7b3,
0x0ff7f793,
0x00f777b3,
0x0ff7f793,
0x00078663,
0x00100793,
0x0080006f,
0x00000793,
0x00f00533,
0x01c12403,
0x02010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x0080006f,
0x00000013,
0x023007b7,
0x00078793,
0x01478793,
0x0007a783,
0x1ff7f713,
0x1ff00793,
0xfef712e3,
0x00000013,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xff010113,
0x00112623,
0x00812423,
0x01010413,
0x00000317,
0x054300e7,
0x00000317,
0x01c300e7,
0x00000013,
0x00c12083,
0x00812403,
0x01010113,
0x00008067,
0xff010113,
0x00812623,
0x01010413,
0x023007b7,
0x00078793,
0x01878793,
0x00100713,
0x00e7a023,
0x00000013,
0x00c12403,
0x01010113,
0x00008067,
0xfe010113,
0x00112e23,
0x00812c23,
0x02010413,
0xfe042623,
0x0440006f,
0xfe042423,
0x0180006f,
0x00000317,
0x068300e7,
0xfe842783,
0x00178793,
0xfef42423,
0x000067b7,
0x00078793,
0x41478793,
0x0007a703,
0xfe842783,
0xfce7ece3,
0xfec42783,
0x00178793,
0xfef42623,
0x000067b7,
0x00078793,
0x41078793,
0x0007a703,
0xfec42783,
0xfae7e6e3,
0x00000013,
0x00000013,
0x01c12083,
0x01812403,
0x02010113,
0x00008067,
0xff010113,
0x00112623,
0x00812423,
0x01010413,
0xffffe317,
0x6c8300e7,
0x000067b7,
0x00078793,
0x10078793,
0x0007a503,
0x000067b7,
0x00078793,
0x10478793,
0x0007a583,
0x000067b7,
0x00078793,
0x10878793,
0x0007a783,
0x00000713,
0x00000693,
0x00f00633,
0xffffe317,
0xecc300e7,
0x00000013,
0x00c12083,
0x00812403,
0x01010113,
0x00008067,
0xfd010113,
0x02812623,
0x03010413,
0x00a007b3,
0xfcf41f23,
0xfe041723,
0x0240006f,
0x00000013,
0xfee45783,
0x01079793,
0x0107d793,
0x00178793,
0x01079793,
0x0107d793,
0xfef41723,
0xfee45783,
0x01079793,
0x0107d793,
0xfde45703,
0xfce7e8e3,
0x00000013,
0x00000013,
0x02c12403,
0x03010113,
0x00008067,
};



u32 data_0[50]=
{
0x0020007c,
0x20002020,
0x0d002020,
0x0a0d000a,
0x00000d0a,
};

u32 data_1 [50]=
{
0x0020007c,
0x20002020,
0x0d002020,
0x0a0d000a,
0x00000d0a,
};

uint8_t mlena[240][240];

int main()
{

    init_platform();

    int i=0,rv;
for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_0->DIN = (u32 ) program[i];
	VIS_AXI_0->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_0->ADDR |= ((u32)i << 5);

	VIS_AXI_0->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_0->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_0->ADDR =0;
}

u32 j=0x3600/4;
for(int i=0; i< sizeof(data_0)/sizeof(data_0[0]);i++)
{
    VIS_AXI_0->DIN = (u32 ) data_0[i];
    VIS_AXI_0->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_0->ADDR |= ((u32)j << 5);

    VIS_AXI_0->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_0->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_0->ADDR =0;
   j++;
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_1->DIN = (u32 ) program[i];
	VIS_AXI_1->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_1->ADDR |= ((u32)i << 5);

	VIS_AXI_1->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_1->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_1->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_1->DIN = (u32 ) data_1[i];
    VIS_AXI_1->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_1->ADDR |= ((u32)j << 5);

    VIS_AXI_1->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_1->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_1->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_2->DIN = (u32 ) program[i];
	VIS_AXI_2->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_2->ADDR |= ((u32)i << 5);

	VIS_AXI_2->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_2->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_2->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_2->DIN = (u32 ) data_0[i];
    VIS_AXI_2->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_2->ADDR |= ((u32)j << 5);

    VIS_AXI_2->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_2->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_2->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_3->DIN = (u32 ) program[i];
	VIS_AXI_3->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_3->ADDR |= ((u32)i << 5);

	VIS_AXI_3->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_3->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_3->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_3->DIN = (u32 ) data_0[i];
    VIS_AXI_3->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_3->ADDR |= ((u32)j << 5);

    VIS_AXI_3->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_3->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_3->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////













///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_4->DIN = (u32 ) program[i];
	VIS_AXI_4->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_4->ADDR |= ((u32)i << 5);

	VIS_AXI_4->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_4->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_4->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_4->DIN = (u32 ) data_1[i];
    VIS_AXI_4->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_4->ADDR |= ((u32)j << 5);

    VIS_AXI_4->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_4->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_4->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_5->DIN = (u32 ) program[i];
	VIS_AXI_5->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_5->ADDR |= ((u32)i << 5);

	VIS_AXI_5->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_5->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_5->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_0[0]);i++)
{
    VIS_AXI_5->DIN = (u32 ) data_0[i];
    VIS_AXI_5->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_5->ADDR |= ((u32)j << 5);

    VIS_AXI_5->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI_5->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_5->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_6->DIN = (u32 ) program[i];
	VIS_AXI_6->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_6->ADDR |= ((u32)i << 5);
	VIS_AXI_6->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo
   while(!(VIS_AXI_6->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_6->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_6->DIN = (u32 ) data_0[i];
    VIS_AXI_6->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_6->ADDR |= ((u32)j << 5);
    VIS_AXI_6->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo
   while(!(VIS_AXI_6->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_6->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_7->DIN = (u32 ) program[i];
	VIS_AXI_7->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_7->ADDR |= ((u32)i << 5);
	VIS_AXI_7->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo
   while(!(VIS_AXI_7->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_7->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_7->DIN = (u32 ) data_0[i];
    VIS_AXI_7->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_7->ADDR |= ((u32)j << 5);
    VIS_AXI_7->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo
   while(!(VIS_AXI_7->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_7->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////



for(int i=0; i < sizeof(program)/sizeof(program[0]);i++)
{
	VIS_AXI_8->DIN = (u32 ) program[i];
	VIS_AXI_8->ADDR |= VIS_AXI_WEN ;
	VIS_AXI_8->ADDR |= ((u32)i << 5);
	VIS_AXI_8->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo
   while(!(VIS_AXI_8->ADDR & VIS_AXI_OK))
   {
    	__asm("nop");
   }
   VIS_AXI_8->ADDR =0;
}



j=0x3600/4;
for(int i=0; i< sizeof(data_1)/sizeof(data_1[0]);i++)
{
    VIS_AXI_8->DIN = (u32 ) data_0[i];
    VIS_AXI_8->ADDR |= VIS_AXI_WEN ;
    VIS_AXI_8->ADDR |= ((u32)j << 5);
    VIS_AXI_8->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo
   while(!(VIS_AXI_8->ADDR & VIS_AXI_OK)){
   __asm("nop");
   }
   VIS_AXI_8->ADDR =0;
   j++;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


	VIS_AXI_0->RST=0;
	VIS_AXI_1->RST=0;
    VIS_AXI_2->RST=0;
	VIS_AXI_3->RST=0;
	VIS_AXI_4->RST=0;
	VIS_AXI_5->RST=0;
    VIS_AXI_6->RST=0;
	VIS_AXI_7->RST=0;
	VIS_AXI_8->RST=0;
    usleep(50);


   	VIS_AXI_0->RST=1;
    VIS_AXI_1->RST=1;
    VIS_AXI_2->RST=1;
	VIS_AXI_3->RST=1;
	VIS_AXI_4->RST=1;
	VIS_AXI_5->RST=1;
    VIS_AXI_6->RST=1;
	VIS_AXI_7->RST=1;
	VIS_AXI_8->RST=1;




	    
















	for (volatile uint32_t i = 0; i < 240; i++)
	{
	    for (volatile uint32_t j = 0; j < 240; j++)
	    {

	        mlena[j][i]=lena[j+240*i];


	    }
	}
   
   //initarrayy();

  // XTime_GetTime(&tStartARM);
  transfer_image();
   while((*CONTADOR)!=0x1FF)
   {
      checkCompletion();
   }

   for (int i = 0; i < 9; i++)
   {
    dados_relativos[i].TempoSegundo=dados[i].TempoSegundo-dados[i].TempoPrimeiro;
    dados_relativos[i].TempoFinal  =dados[i].TempoFinal-dados[i].TempoPrimeiro;
   }
   
   for (int i = 0; i < 9; i++)
   {
    printf("RESULTADOS ABSOLUTOS\n\n\r\n\r");
    
    printf("Tempo Tile %d - Inicial=%lu -- Final=%lu -- Encerramento=%lu \n\r\n\r",i,dados[i].TempoPrimeiro,dados[i].TempoSegundo,dados[i].TempoFinal);
    
   }
      for (int i = 0; i < 9; i++)
   {
    printf("RESULTADOS RELATIVOS\n\n\r\n\r");
    
    printf("Tempo Tile %d - Inicial=%lu -- Final=%lu -- Encerramento=%lu \n\r\n\r",i,dados_relativos[i].TempoPrimeiro,dados_relativos[i].TempoSegundo,dados_relativos[i].TempoFinal);
    
   }



    while(1);
    cleanup_platform();
      return 0;
}



void transfer_image(void)
{
volatile uint32_t pixel;
for (volatile uint32_t i = 0; i < IMAGE_HEIGHT; i++)
{
    for (volatile uint32_t j = 0; j < IMAGE_WIDTH; j++)
    {
		transfer_pixel(mlena[j][i],j,i);
		printf("%d %d\n\r",mlena[j][i],j+240*i);


     // checkMessageSent(j,i);
      //checkCompletion();

    }
}
}


void transfer_pixel(uint32_t pixel,uint32_t x_dest,uint32_t y_dest)
{
// primeiro eu seto os valores
Transfer->PIXEL  = pixel;
Transfer->X_DEST = x_dest;
Transfer->Y_DEST = y_dest;


for(volatile int x =0;x<0;x++);
// setar o req
Transfer->REQ=1;
//espera o ack = '1'
while(Transfer->ACK==0)
	{

	};
// reseta o req
Transfer->REQ=0;
//espera o ack = '0'
while(Transfer->ACK==1)	{};

//xil_printf("|%d %d %d|  \n",Transfer->PIXEL,x_dest,y_dest);

}

void checkCompletion(void)
{

static int arr[9]={0,0,0,0,0,0,0,0,0};

if(*CONTADOR != 0x1FF)
{
for (volatile int i = 0; i < 10; i++)
{
   if(arr[i])
   {
   if((0x1 & (*CONTADOR)>>i)==1)
	  	{
         arr[i]=1;
          XTime_GetTime(&(dados[i].TempoFinal));
		    dados[i].TempoFinal=  (long unsigned int)dados[i].TempoFinal - (long unsigned int) tStartARM;
	  	}
   }
}
}






}


void initarrayy(void)
{
   	for(int i=0;i<3;i++)
	{
	    for(int j=0;j<3;j++)
	    {
	    dados[j+i*3].X_INITi=j*SUB_I ;
	    dados[j+i*3].Y_INITi=i*SUB_I ;

	    dados[j+i*3].X_INITs=j*SUB_I+SUB_I-1 ;
	    dados[j+i*3].Y_INITs=i*SUB_I+SUB_I-1 ;
	    }

	}
}


void checkMessageSent(uint16_t j, uint16_t i)
{
   	            for(int ii=0;ii<3;ii++)
	               {
	                for(int ji=0;ji<3;ji++)
	                  {
	                    if(dados[ji+ii*3].X_INITi==j)
	                    {
	                        if(dados[ji+ii*3].Y_INITi==i)
	                    {
	                        XTime_GetTime(&(dados[ji+ii*3].TempoPrimeiro));
	                        dados[ji+ii*3].TempoPrimeiro=  (long unsigned int)dados[ji+ii*3].TempoPrimeiro - (long unsigned int) tStartARM;
	                        printf("\n\r  %lu",dados[ji+ii*3].TempoPrimeiro);
	                    }}

	                    if(dados[ji+ii*3].X_INITs==j)
	                    {
	                        if(dados[ji+ii*3].Y_INITs==i)
	                    {
		                        XTime_GetTime(&(dados[ji+ii*3].TempoSegundo));
		                        dados[ji+ii*3].TempoSegundo=  (long unsigned int)dados[ji+ii*3].TempoSegundo - (long unsigned int) tStartARM;
		                        printf("\n\r  %lu",dados[ji+ii*3].TempoSegundo);
	                    }}

	                }
	            }

}
