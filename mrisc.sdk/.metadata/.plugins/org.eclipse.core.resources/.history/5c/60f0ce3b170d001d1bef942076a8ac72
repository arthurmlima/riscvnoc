/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "sleep.h"
#include <stdlib.h>


#include "xparameters.h"
#include "xil_printf.h"
#include "xil_types.h"

enum {
	VIS_OK,
	VIS_ERROR
};

#define VIS_BASE_ADDRESS	XPAR_ZCU104_0_BASEADDR

typedef struct
{
	volatile u32 ADDR;
	volatile u32 DIN;
	volatile u32 DOUT;
	volatile u32 RST;
} Vis_AxiStruct;

#define VIS_AXI				((Vis_AxiStruct *)VIS_BASE_ADDRESS)

/* General Purpose Register - Control Bits */
#define VIS_AXI_EN			((u32 )0x00000001)
#define VIS_AXI_WEN			((u32 )0x0000001E) // HABILITA TUDO

/* General Purpose Register - Status Bits */
#define VIS_AXI_OK			((u32 )0x00100000)

/* Address Register */
#define VIS_AXI_ADR			((u32)0x000FFFE0)
#define VIS_AXI_ADR_SHIFT	0UL
#define VIS_AXI_ADR_MASK	((u32)0xFFFFFFFF)

/* Data In Register */
#define VIS_AXI_DTI			((u32)0x00000001)
#define VIS_AXI_DTI_SHIFT	0UL
#define VIS_AXI_DTI_MASK	((u32)0xFFFFFFFF)

/* Data Out Register */
#define VIS_AXI_DTO			((u32)0x00000001)
#define VIS_AXI_DTO_SHIFT	0UL
#define VIS_AXI_DTO_MASK	((u32)0xFFFFFFFF)


#define text_size 670
#define data_size 54


int main()
{

    init_platform();
    u32 program[137];

    u32 text[137]=
    {

    		0xfd010113,
    		0x02112623,
    		0x02812423,
    		0x03010413,
    		0x00000513,
    		0xfea42a23,
    		0x020005b7,
    		0x36400513,
    		0x00a5a223,
    		0x0040006f,
    		0x00000513,
    		0xfea42823,
    		0x0040006f,
    		0xff042583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xff042503,
    		0x00150513,
    		0xfea42823,
    		0xfddff06f,
    		0x00000513,
    		0xfea42623,
    		0x0040006f,
    		0xfec42583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfec42503,
    		0x00150513,
    		0xfea42623,
    		0xfddff06f,
    		0x00000513,
    		0xfea42423,
    		0x0040006f,
    		0xfe842583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfe842503,
    		0x00150513,
    		0xfea42423,
    		0xfddff06f,
    		0x030005b7,
    		0x00300513,
    		0x00a5a023,
    		0x00000513,
    		0xfea42223,
    		0x0040006f,
    		0xfe442583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfe442503,
    		0x00150513,
    		0xfea42223,
    		0xfddff06f,
    		0x00000513,
    		0xfea42023,
    		0x0040006f,
    		0xfe042583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfe042503,
    		0x00150513,
    		0xfea42023,
    		0xfddff06f,
    		0x00000513,
    		0xfca42e23,
    		0x0040006f,
    		0xfdc42583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfdc42503,
    		0x00150513,
    		0xfca42e23,
    		0xfddff06f,
    		0x030005b7,
    		0x00700513,
    		0x00a5a023,
    		0x00000513,
    		0xfca42c23,
    		0x0040006f,
    		0xfd842583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfd842503,
    		0x00150513,
    		0xfca42c23,
    		0xfddff06f,
    		0x00000513,
    		0xfca42a23,
    		0x0040006f,
    		0xfd442583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfd442503,
    		0x00150513,
    		0xfca42a23,
    		0xfddff06f,
    		0x00000513,
    		0xfca42823,
    		0x0040006f,
    		0xfd042583,
    		0x0000f537,
    		0xa5f50513,
    		0x00b54e63,
    		0x0040006f,
    		0x0040006f,
    		0xfd042503,
    		0x00150513,
    		0xfca42823,
    		0xfddff06f,
    		0x030005b7,
    		0x00f00513,
    		0x00a5a023,
    		0xe09ff06f,
    };

    u32 data[54]=
    {
    	0x33323130,
    	0x37363534,
    	0x62613938,
    	0x66656463,
    	0x313d3e00,
    	0x00303030,
    	0x2020000a,
    	0x5f5f5f5f,
    	0x205f2020,
    	0x20202020,
    	0x20202020,
    	0x5f5f5f20,
    	0x2020205f,
    	0x20202020,
    	0x5f5f2020,
    	0x000a5f5f,
    	0x20207c20,
    	0x285c205f,
    	0x5f20295f,
    	0x5f205f5f,
    	0x202f5f5f,
    	0x7c5f5f5f,
    	0x5f5f2020,
    	0x2f20205f,
    	0x5f5f5f20,
    	0x20000a7c,
    	0x5f7c207c,
    	0x207c2029,
    	0x5f202f7c,
    	0x5f202f5f,
    	0x5f5f5c20,
    	0x205c205f,
    	0x205f202f,
    	0x7c207c5c,
    	0x7c20000a,
    	0x5f5f2020,
    	0x7c207c2f,
    	0x7c5f2820,
    	0x295f2820,
    	0x5f5f7c20,
    	0x207c2029,
    	0x20295f28,
    	0x5f7c207c,
    	0x000a5f5f,
    	0x7c5f7c20,
    	0x7c202020,
    	0x5f5c7c5f,
    	0x5f5c5f5f,
    	0x5f2f5f5f,
    	0x2f5f5f5f,
    	0x5f5f5c20,
    	0x5c202f5f,
    	0x5f5f5f5f,
    	0x00000a7c,
    };




    for(int k=0;k<4000;k++)
    {
    	if(k>=0 && k<137)
    	program[k]=text[k];
    	else if(k>=8192/4 && k<=0x2FFC/4)
    	program[k]=data[k-8192/4];
    	else
    	{
    	program[k] =0;
    	}

    }








for(int i=0;i<137;i++)
{
    VIS_AXI->DIN = (u32 ) program[i];
    VIS_AXI->ADDR |= VIS_AXI_WEN ;
    VIS_AXI->ADDR |= ((u32)i << 5);

    VIS_AXI->ADDR |= VIS_AXI_EN ; // Gatilho do enable por ultimo

   while(!(VIS_AXI->ADDR & VIS_AXI_OK)){
    	__asm("nop");
   }
    VIS_AXI->ADDR =0;
}






    VIS_AXI->RST=0;
    usleep(50);


    while(1){
    VIS_AXI->RST = 1;
    }







    cleanup_platform();
    return 0;
}
